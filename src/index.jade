doctype html
html
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui')
		title The Disconnected Ensemble

		link(rel='stylesheet', type='text/css', href='lib/css/reveal.css')
		
		link(rel='stylesheet', type='text/css', href='lib/css/zenburn.css')
		link(rel='stylesheet', type='text/css', href='css/dark_sole.css')
		link(rel='stylesheet', type='text/css', href='css/sole.css')

		script(src='js/bundle.js', defer)

	body
		
		div.reveal
			div.twitter
				@supersole
				
			div.slides
				section
					h1 The<br /><strong>Disconnected</strong><br />Ensemble

				section
					h1 Soledad Penad√©s
					h2 @supersole
				
				section
					h1 I work at <strong>Mozilla</strong>
					h2.fragment You might have heard of <strong>Firefox OS</strong>
					h3.fragment.roll-in Available in <strong>29</strong> countries<br />with <strong>14</strong> global operators...
				section
					h3 But we weren‚Äôt completely satisfied

				section
					h3 Writing a full OS in JS and<br /> shipping all those phones...?
					h2.fragment Maybe we hadn‚Äôt<br />gone far enough

				section(data-transition='zoom')
					h1 How do we<br />go <strong>further</strong>?

				section
					h1 We brainstormed
					h2.fragment 50+ groups
					h3.fragment Lots of ideas!

				section
					h3 Some were <em>obvious</em>
					ul
						li.fragment streamline the build system
						li.fragment rethink code structure
						li.fragment deliver more polish

				section
					h3 Of course,
					h2.fragment I was more into
						strong.fragment <br />the riskier ideas
					ul
						li.fragment rethink smartphones for less intrusiveness
						li.fragment offline sharing app updates
						li.fragment context-aware phones
						li.fragment ...

				section
					h3 my favourite?
					h1.fragment the <strong>P2P</strong> web
					blockquote.fragment Drop the cloud,<br/>surf local

				section
					h3 Sending data between devices ===<br />a round trip to <q>the cloud</q>
					h2.fragment even when devices are physically close
					h1.fragment <strong>Why?</strong>

				section
					h3 Maybe we don‚Äôt need a cloud
					h2.fragment Yet it is the business model<br />for many companies
				section
					h3 Mozilla has <strong>no interest</strong> in data-mining users
					h2.fragment We want <strong>you</strong> to<br />control <strong>your</strong> data

				section
					h3 I saw the p2p web prototypes
					ul
						li.fragment file sharing between phones via adhoc networks
						li.fragment multiplayer emulated games
						li.fragment device discovery
						li.fragment ...
					h2.fragment All in JavaScript!<br /><span class="fragment">Running <em>on phones</em>!</span>

				section
					h1 This was so <strong>exciting</strong>!

				section
					h2 I wanted to <strong>tinker</strong>
						span.fragment <br/>and <strong>make cool stuff</strong>
					h1.fragment immediately

				section
					h2 ... but <strong>what</strong> to do?

				section
					h3 p2p === social
					p.fragment this would be a challenge for me
					h3.fragment "JS === toy language"
					p.fragment this would be another challenge
					h3.fragment and of course...
					p.fragment sole <span class="fragment afterstrike">likes</span> <span class="fragment">loves</span> <span class="fragment">music</span>

				section
					h3 so what about...
					h1.fragment <strong>Musical toys</strong>?
					ul
						li.fragment Toys are social
						li.fragment We don‚Äôt need internet
						li.fragment And if done right... 
							span.fragment you can even keep the toys!

				section
					h1 I got even<br /><strong>more excited</strong>!


				section
					p We will form a band
					h3.fragment We will trascend laptop musicians
					h2.fragment We will be
					h1.fragment <strong>The Disconnected Ensemble</strong>


				section
					h2 So <strong>how</strong> do we make it happen?
					
				section
					h1 The plan
					ol
						li.fragment Make musical toys
						li.fragment Put them on a device
						li.fragment Make them available to other devices
						li.fragment Play music! Have fun!

				section
					h1 <span class="digit">1</span> Making<br />musical toys

				section
					h2 Each toy consists of...
					ul
						li.fragment a Web Audio based audio node
						li.fragment a Web Component based UI                                           

				section
					h2 Web Audio nodes
					h3.fragment Web Audio is modular
					img(class='fragment', src='img/modular-routing.png')

				section
					h2 One toy = one audio node
					h3.fragment Based on the <a href="">OpenMusic</a> pattern
					ul
						li.fragment Constructor takes <tt>AudioContext</tt>
						li.fragment Returns <strong>Audio Node</strong>

					pre.fragment
						code(data-trim, contenteditable).
							var Theremin = require('openmusic-theremin');
							var ac = new AudioContext();
							var thereNode = Theremin(ac);

							thereNode.start();
							thereNode.octaves = 3;
							thereNode.filter.cutoff = 300;

				
				section
					h2 Web Component UI
					h3.fragment Since Audio Nodes...
					ul
						li.fragment have properties<span class="fragment">, and</span>
						li.fragment emit events
					p.fragment we'll use those to build a <strong>Custom Element</strong> representing the node

				section
					h2 Custom Elements
					h3.fragment Let you define <strong>new types</strong> of DOM elements

					p.fragment e.g.
					pre.fragment
						code(data-trim).
							var thereUI =
							&nbsp;&nbsp;document.createElement('openmusic-theremin-ui');
							document.body.appendChild(thereUI);
							thereUI.attachTo(thereNode);

				section
					h2 <tt>attachTo()</tt>
					ul
						li.fragment sets up listeners for events on the audio node
						li.fragment and listeners for events on the custom element
						li.fragment so everything is in sync
					
					h3.fragment Also UI and Audio are decoupled
					ul
						li.fragment you can replace this element with a better one
						li.fragment or use this element to control a similarly interfaced <tt>AudioNode</tt>
						li.fragment or use this <tt>AudioNode</tt> elsewhere

				section
					h3 Nothing p2p specific so far
					h2.fragment The toys work in<br /><strong>any modern browser</strong>

				
				section
					h1 <span class="digit">2</span> Putting the toys in a device

				section
					h2 A static website
					p.fragment
						img(src='img/toypicker_screenshot.png', style='width: 50%; height: auto;')
					p.fragment Again, nothing p2p specific either&mdash;works in any browser

				section
					h1 <span class="digit">3</span> Making toys available
				
				section
					h3 We have a website
					h2.fragment so we need <strong>a server</strong>!

				section
					h3 We can‚Äôt build a server on a normal browser
					h2.fragment but Firefox OS apps <br /><strong>have superpowers</strong>
					h1.fragment <tt><span class="prefixed">moz</span>TCPSocket</tt>

				section
					h3 Let‚Äôs bundle 
						span.fragment the <strong>static website</strong> 
						span.fragment <br />and a <strong>web server</strong> 
						span.fragment into a <strong>Firefox OS app</strong> 
						span.fragment <br />and <strong>install it</strong> on the 
						span.fragment <strong>master device</strong>

				section
					h2 <tt>fxos-web-server</tt>
					pre.fragment
						code(data-trim).
							var HTTPServer = require('fxos-web-server');
							var server = new HTTPServer(80);
							server.start();


				section
					h2 Responses to requests
					pre.fragment
						code(data-trim).
							server.addEventListener('request', function(evt) {
								var request = evt.request;
								var response = evt.response;
								var requestPath = request.path;

								// ... processing request
							});

				section
					h2 <tt>fxos-web-server</tt> doesn‚Äôt have any<br /><strong>built-in logic</strong>, <strong>route</strong> or <strong>path parsing</strong>
					h3.fragment We have to do it ourselves!

				section
					h2 Route parsing
					ul
						li.fragment serve the contents of <tt>index.html</tt> if we request a <q>directory</q>
							span.fragment <br />(i.e. <tt>request.path</tt> ends with <tt>'/'</tt>)
						li.fragment serve the contents of a resource if we request a file
							span.fragment <br />(i.e. <tt>request.path</tt> doesn‚Äôt end with <tt>'/'</tt>)


				section
					h2 Content type
					h3 extension to content type
					ul
						li.fragment <tt>'html'</tt> &rarr; <tt>'text/html'</tt>
						li.fragment <tt>'jpg'</tt> &rarr; <tt>'image/jpeg'</tt>
						li.fragment ...

					p.fragment naive, but works üòè

				
				section
					h2 Actually serving
					pre.fragment
						code(data-trim).
							response.headers['Content-Type'] =
								getContentType(resource);
								
							response.sendFile(resource);


				section
					h2 What‚Äôs my IP?
					ul
						li.fragment Settings
							span.fragment  &rarr; Wi-Fi
							span.fragment  &rarr; Available Networks
							span.fragment  &rarr; Current network
						li.fragment ... or Firefox OS‚Äô <tt><span class="prefixed">moz</span>WifiManager</tt>


				section
					h2 <tt><span class="prefixed">moz</span>WifiManager</tt>
					pre.fragment
						code(data-trim, class='language-javascript').
							var wifiManager = navigator.mozWifiManager;
							var connInfo = wifiManager.connectionInformation;
							var status = wifiManager.connection.status;
							var network = wifiManager.connection.network;
							var ipAddress = connInfo.ipAddress;

				section(data-background='img/toypicker_served.jpg')
				
				section
					h3 Although...

				section(data-background='img/typing.gif', class="dark")
					h2 Typing in IP addresses
					h3.fragment is <strong>tedious</strong> in a computer
						span.fragment  and <strong>unbearably cumbersome</strong> on a touch device

					p.fragment How can we reduce this friction?

				
				section
					h2 <strong>NFC</strong> <span class="fragment">to the rescue</span>
					h3.fragment <em>Near Field Communication</em>
					ul
						li.fragment Transmit small pieces of data between devices
						li.fragment Firefox OS apps have access to <tt><span class="prefixed">moz</span>WebNFC</tt>
						li.fragment NFC enabled devices navigate to URLs when they receive one
						li.fragment New feature for our web server:
							span.fragment  <br /><strong>send our URL</strong> when a device is near!
						li.fragment No need to type!

				section
					h2 NFC support
					ul
						li.fragment Firefox OS
						li.fragment Android
						li.fragment Windows Phone
						li.fragment iPhone 6+
							strong.fragment  could work
							span.fragment , but Apple keep the chip to themselves for <em>iPay</em>
					p.fragment Apple... ¬Ø\_(„ÉÑ)_/¬Ø


				section
					h3 it is finally 
					h2.fragment time for
					h1.fragment <strong>DEMOS</strong>


				section
					h2 The TODO / IDEAS list

					ul
						li.fragment More toys!
						li.fragment controlling global music parameters from the <em>master</em> device
							span.fragment  (running a WebSockets server too)
						li.fragment <tt>ServiceWorkers</tt> and <tt>Cache</tt> so friends keep the toys
						li.fragment Store &amp; share toy presets
						li.fragment Automatic discovery of master device with mDNS
						li.fragment Send touch &amp; input events from clients to master
							span.fragment , so we can record/edit the <em>jam</em>
						li.fragment Related: exporting to WAV / MP3
						li.fragment Automatic network setup using WiFi direct
						li.fragment Interface with MIDI surfaces using Open Sound Control (uses UDPSockets)
						li.fragment ???

				section
					h2 Talk to me if you want to<br /><strong>hack</strong> on this!

				section
					h2 Or <strong>don‚Äôt talk to me</strong>, but feel free to <strong>use bits and pieces</strong> of it, or <strong>use it all</strong>!

				section
					h3 Or in other words,
					h1.fragment <strong>Do whatever<br />you want</strong>
					h2.fragment It‚Äôs the web!

				section
					h3 Resources and pointers
					h2 <tt>github.com/sole/the-p2p-web</tt>

				section(data-background='img/catfinity.gif', class='dark')
					h1 thankssss

